name: "Build & Release"

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on tags like v1.0.6

jobs:
  # Android Build Job
  android-build:
    name: Build & Release Android
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Explanation: Fetches the project code from the GitHub repository.

      # 2. Setup Java (required for Android builds)
      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
        # Explanation: Java 17 is required for Android builds, setting up the environment.

      # 3. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.6'
          channel: 'stable'
        # Explanation: Installs Flutter SDK in the environment so Flutter commands can run.

      # 4. Install dependencies
      - name: Install Dependencies
        run: flutter pub get
        # Explanation: Installs Flutter dependencies listed in pubspec.yaml.

      # 5. Analyze code (optional step for linting)
      - name: Analyze Code
        run: flutter analyze
        continue-on-error: true
        # Explanation: Analyzes the code for linting issues but doesn’t fail the workflow on error.

      # 6. Run tests (optional step)
      - name: Test Flutter App
        run: flutter test
        continue-on-error: true
        # Explanation: Runs Flutter unit tests but doesn’t block the workflow if tests fail.

      # 7. Build APK
      - name: Build APK
        run: flutter build apk --release --no-tree-shake-icons
        # Explanation: Builds the release APK for Android.

      # 8. Build AAB
      - name: Build App Bundle
        run: flutter build appbundle --no-tree-shake-icons
        # Explanation: Builds the Android App Bundle (AAB), which is required for Play Store distribution.

      # 9. Upload Android Artifacts (APK and AAB)
      - name: Upload Android Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Android Releases
          path: |
            ${{ github.workspace }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ github.workspace }}/build/app/outputs/bundle/release/app-release.aab
        # Explanation: Uploads the APK and AAB to be available for the release step.
  
  # iOS Build Job
  ios-build:
    name: Build & Release iOS
    runs-on: macos-latest

    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        # Explanation: Fetches the project code for iOS builds.

      # 2. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.6'
          channel: 'stable'
        # Explanation: Installs Flutter SDK to allow iOS builds.

      # 3. Install dependencies
      - name: Install Dependencies
        run: flutter pub get
        # Explanation: Installs Flutter dependencies needed for iOS.

      # 4. Build IPA (no code-signing for testing purposes)
      - name: Build IPA
        run: flutter build ipa --no-codesign
        # Explanation: Builds an IPA without code-signing, ideal for testing.

      # 5. Compress iOS build into a .tar.gz archive
      - name: Compress iOS Build
        run: |
          cd build
          tar -czf ios_build.tar.gz ios
        # Explanation: Compresses the iOS build into a .tar.gz for easier artifact handling.

      # 6. Upload iOS Artifacts
      - name: Upload iOS Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: iOS Releases
          path: ${{ github.workspace }}/build/ios_build.tar.gz
        # Explanation: Uploads the iOS build artifacts for the release step.
  
  # Create Release Job
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [android-build, ios-build]  # Ensure Android and iOS builds finish first

    steps:
      # 1. Download Android Artifacts
      - name: Download Android Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Android Releases
        # Explanation: Downloads the Android APK and AAB artifacts for the release.

      # 2. Download iOS Artifacts
      - name: Download iOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: iOS Releases
        # Explanation: Downloads the iOS IPA artifact.

      # 3. Create GitHub Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}  # Automatically uses the pushed tag (e.g., v1.0.6)
          name: ${{ github.ref_name }}  # Set the release name as the tag name
          artifacts: |
            ${{ github.workspace }}/build/app/outputs/flutter-apk/app-release.apk
            ${{ github.workspace }}/build/app/outputs/bundle/release/app-release.aab
            ${{ github.workspace }}/build/ios_build.tar.gz
          token: ${{ secrets.HELLO }}
          generateReleaseNotes: false
          makeLatest: legacy
        # Explanation: Creates a GitHub release and attaches APK, AAB, and IPA build artifacts.
